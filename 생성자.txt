//2. 생성자(constructor)
	
// -new 연산자를 통해서 객체를 생성할 때
//  생성된 객체의 필드 값 초기화 + 지정된 기능을 수행하는역할
	
속성 = private string name 이런것들 

필드 == 속성 이라고도 한다

	
//    -생성자 작성 규칙
//  1) 생성자의 이름 반드시 클래스의 명과 같아야한다
//  2) 반환형이 존재하지 않는다.

//  - 생성자 종류
//   1) 기본 생성자
//   2) 매개변수 생성자

  기본생성자

 [접근제한자] 클래스명() {코드}

public Student () {
	내부는 객체가 생성될 때 수행할 코드	                  << 이 메서드는 현재 클래스이름을 적음 
	System.out.println("기본 생성자에 의해서 Student 객체가 생성됨")}

매개변수 없는 생성자 -> 기본생성자라고 한다
	 // clsService의 기본생성자가 작성되어 있지 않지만
	 // 문제없이사용o
	 // 왜?
	 // 컴파일러가 코드를 번역할때
	 // 클래스 내부에 생성자가 하나도 없다면
	 // 자동으로 기본생성자를 추가해줌(우리눈에 안보임)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
//매개변수 생성자
	// ** 사용되는 기술, 변수, : 매개변수, Overloading(오버로딩),this

// 자바는 기본적으로 필드명, 생성자명, 메서드명, 변수명의
// 중복을 허용하지 않음

근데 이걸 가능하게 하는 것은

// *** 오버로딩 (overloading) ***
// - 클래스 내에 동일한 이름의 메서드(생성자도 포함)를 여러개 작성하는 기법

// 하나의이름으로 여러 기능을 수행할 수 있게 하는 것

오버로딩 조건

메서드의 이름이 동일할 것
매개변수의 갯수 타입 순서 중에 한개라도 달라야됨 타입 = 자료형 
오버로딩은 변수명은 신경쓰지 않는다 오로지 3개 타입 , 순서 , 갯수

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
this() 생성자

같은 클래스의 다른 생성자를 호출할 때 사용

생성자 내에서 반드시 첫번째 줄에 작성해야만 한다 다른 코드 쓰면 에러 난다

중복 코드 제거, 코드 길이 감소, 재사용성 증가 ...

가독성이 좀 떨어지는 경우가 있어서(단점)


